substitutions:
  # main prefix for all entities
  name: "Desk"
  # name of your node
  node_name: "jarvis-s3"

esphome:
  name: $node_name
  includes:
    - jarvis_s3/include/JarvisDesk.h
    - jarvis_s3/src/JarvisDesk.cpp
    - jarvis_s3/include/CombinedHandler.h
    - jarvis_s3/src/CombinedHandler.cpp
    - jarvis_s3/include/SerialDevice.h
    - jarvis_s3/src/SerialDevice.cpp
    - jarvis_s3/include/SerialMessage.h
    - jarvis_s3/src/SerialMessage.cpp
    - jarvis_s3/include/utils.h
    - jarvis_s3/src/utils.cpp
    - jarvis_s3/include/Timer.h
    - jarvis_s3/src/Timer.cpp
  on_boot:
    then:
      - logger.log: "Hello World"

esp32:
  board: lolin_s3
  framework:
    type: esp-idf

  

# Enable logging
logger:
  level: VERBOSE
  baud_rate: 115200
  deassert_rts_dtr: true

# Enable Home Assistant API
api:
  encryption:
    key: "==="

ota:
  password: "==="

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  fast_connect: on
  manual_ip:
    static_ip: ===
    gateway: ===
    subnet: ===
    dns1: ===
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Lolins3 Fallback Hotspot"
    password: "==="

# captive_portal:

uart:
  - id: jarvis_uart
    tx_pin:
      number: 8
      inverted: false
    rx_pin:
      number: 11
      inverted: false
      mode:
        input: true
        pullup: false
    baud_rate: 9600
    # rx_buffer_size: 1024
#     debug:
#       direction: BOTH
#       dummy_receiver: true
#       after:
#         delimiter: [0x7e]
#       sequence:
#         - lambda: UARTDebug::log_hex(direction, bytes, ':');

# switch:
#   - platform: uart
#     uart_id: jarvis_uart
#     name: "Request heignt from Jarvis"
#     data: [0xF1, 0xF1, 0x20, 0x00, 0x20, 0x7E]
#   - platform: uart
#     uart_id: jarvis_uart
#     name: "Request basic settings from Jarvis"
#     data: [0xF1, 0xF1, 0xFE, 0x00, 0xFE, 0x7E]
#   - platform: uart
#     uart_id: jarvis_uart
#     name: "Request limits from Jarvis"
#     data: [0xF1, 0xF1, 0x0C, 0x00, 0x0C, 0x7E]
#   - platform: uart
#     uart_id: jarvis_uart
#     name: "Request height and positions from Jarvis"
#     data: [0xF1, 0xF1, 0x07, 0x00, 0x07, 0x7E]
#   - platform: uart
#     uart_id: jarvis_uart
#     name: "Wake Jarvis"
#     data: [0xF1, 0xF1, 0x29, 0x00, 0x29, 0x7E]

custom_component:
  lambda: |-
    auto my_custom = new JarvisDesk();
    my_custom->sHeight = id(height_number);
    my_custom->sPreset1 = id(preset_1_sensor);
    my_custom->sPreset2 = id(preset_2_sensor);
    my_custom->sPreset3 = id(preset_3_sensor);
    my_custom->sPreset4 = id(preset_4_sensor);
    my_custom->sSysLimitMin = id(sys_limit_min);
    my_custom->sSysLimitMax = id(sys_limit_max);
    my_custom->sUserLimitMin = id(user_limit_min);
    my_custom->sUserLimitMax = id(user_limit_max);
    my_custom->sUserLimitSet = id(user_limit_set);
    my_custom->sUnits = id(units_select);
    my_custom->sTouchMode = id(touch_mode_select);
    my_custom->sKillMode = id(kill_mode_select);
    my_custom->sSensitivity = id(sensitivity_select);
    my_custom->sDeskInitialized = id(desk_initialized);
    return {my_custom};
  components:
    - id: desk

binary_sensor:
  - platform: status
    name: "Desk Status"

sensor:
  # desk
  - platform: template
    name: "$name Preset 1 Position"
    id: preset_1_sensor
  - platform: template
    name: "$name Preset 2 Position"
    id: preset_2_sensor
  - platform: template
    name: "$name Preset 3 Position"
    id: preset_3_sensor
  - platform: template
    name: "$name Preset 4 Position"
    id: preset_4_sensor
  - platform: template
    name: "$name User limit min"
    id: user_limit_min
  - platform: template
    name: "$name User limit max"
    id: user_limit_max
  - platform: template
    name: "$name System limit min"
    id: sys_limit_min
  - platform: template
    name: "$name System limit max"
    id: sys_limit_max


text_sensor:
  - platform: template
    name: "$name User limit set"
    id: user_limit_set
  - platform: template
    name: "$name initialized"
    id: desk_initialized
  
select:
  - platform: template
    name: "$name Units"
    id: units_select
    options:
      - inch
      - cm
    optimistic: false
    set_action:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setUnits(x.c_str());
  - platform: template
    name: "$name Touch Mode"
    id: touch_mode_select
    options:
      - Continuous
      - Single
    optimistic: false
    set_action:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setTouchMode(x.c_str());
  - platform: template
    name: "$name Kill Mode"
    id: kill_mode_select
    options:
      - Kill
      - LetLive
    optimistic: false
    set_action:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setKillMode(x.c_str());
  - platform: template
    name: "$name Sensitivity"
    id: sensitivity_select
    options:
      - High
      - Medium
      - Low
    optimistic: false
    set_action:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setSensitivity(x.c_str());

number:
  - platform: template
    name: "$name Height"
    id: height_number
    optimistic: false
    min_value: 1
    max_value: 1800
    step: 10
    set_action:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).move(x);
  - platform: template
    name: "$name Offset"
    id: offset_number
    optimistic: true
    min_value: 1
    max_value: 1800
    step: 1
    set_action:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setOffset(x);

button:
  - platform: template
    name: "$name Go to preset 1"
    id: go_preset_1
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).goPreset1();
  - platform: template
    name: "$name Go to preset 2"
    id: go_preset_2
    on_press:
      - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).goPreset2();
  - platform: template
    name: "$name Go to preset 3"
    id: go_preset_3
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).goPreset3();
  - platform: template
    name: "$name Go to preset 4"
    id: go_preset_4
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).goPreset4();
  - platform: template
    name: "$name Set preset 1"
    id: set_preset_1
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setPreset1();
  - platform: template
    name: "$name Set preset 2"
    id: set_preset_2
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setPreset2();
  - platform: template
    name: "$name Set preset 3"
    id: set_preset_3
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setPreset3();
  - platform: template
    name: "$name Set preset 4"
    id: set_preset_4
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setPreset4();
  - platform: template
    name: "$name Set max height"
    id: set_max_height
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setMaxHeight();
  - platform: template
    name: "$name Set min height"
    id: set_min_height
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).setMinHeight();
  - platform: template
    name: "$name Set max height"
    id: clear_max_height
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).clearMaxHeight();
  - platform: template
    name: "$name Set min height"
    id: clear_min_height
    on_press:
      then:
        - lambda: (*reinterpret_cast<JarvisDesk*>(id(desk))).clearMinHeight();
